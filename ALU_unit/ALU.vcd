$date
	Fri Dec 01 01:06:10 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module ALU_tb $end
$var wire 1 ! z_flag $end
$var wire 32 " res [31:0] $end
$var wire 1 # n_flag $end
$var reg 32 $ A [31:0] $end
$var reg 32 % B [31:0] $end
$var reg 4 & op [3:0] $end
$var reg 5 ' shiftAmount [4:0] $end
$var integer 32 ( i [31:0] $end
$scope module uut $end
$var wire 1 # negative_flag $end
$var wire 4 ) opcode [3:0] $end
$var wire 32 * operand_A [31:0] $end
$var wire 32 + operand_B [31:0] $end
$var wire 32 , result [31:0] $end
$var wire 5 - shift_amount [4:0] $end
$var wire 1 ! zero_flag $end
$scope module AC $end
$var wire 3 . alu_control [2:0] $end
$var wire 4 / opcode [3:0] $end
$var reg 3 0 alu_c [2:0] $end
$upscope $end
$scope module BS $end
$var wire 4 1 opcode [0:3] $end
$var wire 32 2 operand_B [31:0] $end
$var wire 32 3 operand_B_BS [31:0] $end
$var wire 5 4 shift_amount [4:0] $end
$var reg 32 5 op [31:0] $end
$var integer 32 6 i [31:0] $end
$upscope $end
$scope module alu $end
$var wire 3 7 alu_control [2:0] $end
$var wire 1 8 negative_flag $end
$var wire 32 9 operand_A [31:0] $end
$var wire 32 : operand_B_ALU [31:0] $end
$var wire 32 ; result [31:0] $end
$var wire 1 < zero_flag $end
$var reg 1 8 n_flag $end
$var reg 32 = res [31:0] $end
$var reg 1 < z_flag $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1000101000011100011010010001010 =
0<
b1000101000011100011010010001010 ;
b10000100100001001101011000001001 :
b11000000100010010101111010000001 9
08
b100 7
b0 6
b10000100100001001101011000001001 5
b11 4
b10000100100001001101011000001001 3
b10000100100001001101011000001001 2
b100 1
b100 0
b100 /
b100 .
b11 -
b1000101000011100011010010001010 ,
b10000100100001001101011000001001 +
b11000000100010010101111010000001 *
b100 )
b0 (
b11 '
b100 &
b10000100100001001101011000001001 %
b11000000100010010101111010000001 $
0#
b1000101000011100011010010001010 "
0!
$end
#1
1!
1<
b0 "
b0 ,
b0 ;
b0 =
b0 .
b0 7
b0 0
b10110010110000101000010001100101 3
b10110010110000101000010001100101 :
b10110010110000101000010001100101 5
b10010 '
b10010 -
b10010 4
b10110010110000101000010001100101 %
b10110010110000101000010001100101 +
b10110010110000101000010001100101 2
b1000110110111111001100110001101 $
b1000110110111111001100110001101 *
b1000110110111111001100110001101 9
b1101 &
b1101 )
b1101 /
b1101 1
b1 (
#2
0!
0<
b111101111101000011110001111011 "
b111101111101000011110001111011 ,
b111101111101000011110001111011 ;
b111101111101000011110001111011 =
b10 .
b10 7
b10 0
b111011001000111111000101110110 3
b111011001000111111000101110110 :
b111011001000111111000101110110 5
b11101 '
b11101 -
b11101 4
b111011001000111111000101110110 %
b111011001000111111000101110110 +
b111011001000111111000101110110 2
b110110101111100110100001101 $
b110110101111100110100001101 *
b110110101111100110100001101 9
b1 &
b1 )
b1 /
b1 1
b10 (
#3
1!
1<
b0 "
b0 ,
b0 ;
b0 =
b0 .
b0 7
b0 0
b1111100111111011110100111111001 3
b1111100111111011110100111111001 :
b1111100111111011110100111111001 5
b110 '
b110 -
b110 4
b1111100111111011110100111111001 %
b1111100111111011110100111111001 +
b1111100111111011110100111111001 2
b1000110001011011111011110001100 $
b1000110001011011111011110001100 *
b1000110001011011111011110001100 9
b1101 &
b1101 )
b1101 /
b1101 1
b11 (
#4
b1110010101011111111011111100101 3
b1110010101011111111011111100101 :
b1110010101011111111011111100101 5
b10111 '
b10111 -
b10111 4
b1110010101011111111011111100101 %
b1110010101011111111011111100101 +
b1110010101011111111011111100101 2
b11010101000100111101001010101010 $
b11010101000100111101001010101010 *
b11010101000100111101001010101010 9
b101 &
b101 )
b101 /
b101 1
b100 (
#5
0!
0<
1#
18
b11001110101111000111000110011101 "
b11001110101111000111000110011101 ,
b11001110101111000111000110011101 ;
b11001110101111000111000110011101 =
b11 .
b11 7
b11 0
b1111001001100000110100111110010 3
b1111001001100000110100111110010 :
b1111001001100000110100111110010 5
b1110 '
b1110 -
b1110 4
b1111001001100000110100111110010 %
b1111001001100000110100111110010 +
b1111001001100000110100111110010 2
b1000111111011001101101110001111 $
b1000111111011001101101110001111 *
b1000111111011001101101110001111 9
b10 &
b10 )
b10 /
b10 1
b101 (
#6
b11101110110110100100111111011101 "
b11101110110110100100111111011101 ,
b11101110110110100100111111011101 ;
b11101110110110100100111111011101 =
b101 .
b101 7
b101 0
b101110010110000100100101011100 3
b101110010110000100100101011100 :
b101110010110000100100101011100 5
b11101 '
b11101 -
b11101 4
b101110010110000100100101011100 %
b101110010110000100100101011100 +
b101110010110000100100101011100 2
b11100010110010100100111011000101 $
b11100010110010100100111011000101 *
b11100010110010100100111011000101 9
b1000 &
b1000 )
b1000 /
b1000 1
b110 (
#7
1!
1<
0#
08
b0 "
b0 ,
b0 ;
b0 =
b0 .
b0 7
b0 0
b10110001111011110110001001100011 3
b10110001111011110110001001100011 :
b10110001111011110110001001100011 5
b1010 '
b1010 -
b1010 4
b10110001111011110110001001100011 %
b10110001111011110110001001100011 +
b10110001111011110110001001100011 2
b10110010101001110010011001100101 $
b10110010101001110010011001100101 *
b10110010101001110010011001100101 9
b1101 &
b1101 )
b1101 /
b1101 1
b111 (
#8
0!
0<
b10000011000000000000100100000 "
b10000011000000000000100100000 ,
b10000011000000000000100100000 ;
b10000011000000000000100100000 =
b1 .
b1 7
b1 0
b1010101011110000100010110101010 3
b1010101011110000100010110101010 :
b1010101011110000100010110101010 5
b11101 '
b11101 -
b11101 4
b1010101011110000100010110101010 %
b1010101011110000100010110101010 +
b1010101011110000100010110101010 2
b10000011001000010000100100000 $
b10000011001000010000100100000 *
b10000011001000010000100100000 9
b0 &
b0 )
b0 /
b0 1
b1000 (
#9
1!
1<
b0 "
b0 ,
b0 ;
b0 =
b0 .
b0 7
b0 0
b10000110101111000011100000001101 3
b10000110101111000011100000001101 :
b10000110101111000011100000001101 5
b10011 '
b10011 -
b10011 4
b10000110101111000011100000001101 %
b10000110101111000011100000001101 +
b10000110101111000011100000001101 2
b10001001100000111011100000010011 $
b10001001100000111011100000010011 *
b10001001100000111011100000010011 9
b110 &
b110 )
b110 /
b110 1
b1001 (
#10
b1010 (
